// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: queryhandler.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueryHandlerService_Compile_FullMethodName        = "/com.sqream.cloud.generated.v1.QueryHandlerService/Compile"
	QueryHandlerService_Execute_FullMethodName        = "/com.sqream.cloud.generated.v1.QueryHandlerService/Execute"
	QueryHandlerService_Status_FullMethodName         = "/com.sqream.cloud.generated.v1.QueryHandlerService/Status"
	QueryHandlerService_Fetch_FullMethodName          = "/com.sqream.cloud.generated.v1.QueryHandlerService/Fetch"
	QueryHandlerService_CloseStatement_FullMethodName = "/com.sqream.cloud.generated.v1.QueryHandlerService/CloseStatement"
	QueryHandlerService_Cancel_FullMethodName         = "/com.sqream.cloud.generated.v1.QueryHandlerService/Cancel"
	QueryHandlerService_CloseSession_FullMethodName   = "/com.sqream.cloud.generated.v1.QueryHandlerService/CloseSession"
)

// QueryHandlerServiceClient is the client API for QueryHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryHandlerServiceClient interface {
	Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	CloseStatement(ctx context.Context, in *CloseStatementRequest, opts ...grpc.CallOption) (*CloseStatementResponse, error)
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error)
}

type queryHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryHandlerServiceClient(cc grpc.ClientConnInterface) QueryHandlerServiceClient {
	return &queryHandlerServiceClient{cc}
}

func (c *queryHandlerServiceClient) Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error) {
	out := new(CompileResponse)
	err := c.cc.Invoke(ctx, QueryHandlerService_Compile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryHandlerServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, QueryHandlerService_Execute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryHandlerServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, QueryHandlerService_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryHandlerServiceClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, QueryHandlerService_Fetch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryHandlerServiceClient) CloseStatement(ctx context.Context, in *CloseStatementRequest, opts ...grpc.CallOption) (*CloseStatementResponse, error) {
	out := new(CloseStatementResponse)
	err := c.cc.Invoke(ctx, QueryHandlerService_CloseStatement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryHandlerServiceClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, QueryHandlerService_Cancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryHandlerServiceClient) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error) {
	out := new(CloseSessionResponse)
	err := c.cc.Invoke(ctx, QueryHandlerService_CloseSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryHandlerServiceServer is the server API for QueryHandlerService service.
// All implementations must embed UnimplementedQueryHandlerServiceServer
// for forward compatibility
type QueryHandlerServiceServer interface {
	Compile(context.Context, *CompileRequest) (*CompileResponse, error)
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	CloseStatement(context.Context, *CloseStatementRequest) (*CloseStatementResponse, error)
	Cancel(context.Context, *CancelRequest) (*CancelResponse, error)
	CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error)
	mustEmbedUnimplementedQueryHandlerServiceServer()
}

// UnimplementedQueryHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryHandlerServiceServer struct {
}

func (UnimplementedQueryHandlerServiceServer) Compile(context.Context, *CompileRequest) (*CompileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compile not implemented")
}
func (UnimplementedQueryHandlerServiceServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedQueryHandlerServiceServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedQueryHandlerServiceServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedQueryHandlerServiceServer) CloseStatement(context.Context, *CloseStatementRequest) (*CloseStatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseStatement not implemented")
}
func (UnimplementedQueryHandlerServiceServer) Cancel(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedQueryHandlerServiceServer) CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedQueryHandlerServiceServer) mustEmbedUnimplementedQueryHandlerServiceServer() {}

// UnsafeQueryHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryHandlerServiceServer will
// result in compilation errors.
type UnsafeQueryHandlerServiceServer interface {
	mustEmbedUnimplementedQueryHandlerServiceServer()
}

func RegisterQueryHandlerServiceServer(s grpc.ServiceRegistrar, srv QueryHandlerServiceServer) {
	s.RegisterService(&QueryHandlerService_ServiceDesc, srv)
}

func _QueryHandlerService_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryHandlerServiceServer).Compile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryHandlerService_Compile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryHandlerServiceServer).Compile(ctx, req.(*CompileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryHandlerService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryHandlerServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryHandlerService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryHandlerServiceServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryHandlerService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryHandlerServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryHandlerService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryHandlerServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryHandlerService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryHandlerServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryHandlerService_Fetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryHandlerServiceServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryHandlerService_CloseStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryHandlerServiceServer).CloseStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryHandlerService_CloseStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryHandlerServiceServer).CloseStatement(ctx, req.(*CloseStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryHandlerService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryHandlerServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryHandlerService_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryHandlerServiceServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryHandlerService_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryHandlerServiceServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryHandlerService_CloseSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryHandlerServiceServer).CloseSession(ctx, req.(*CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryHandlerService_ServiceDesc is the grpc.ServiceDesc for QueryHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.sqream.cloud.generated.v1.QueryHandlerService",
	HandlerType: (*QueryHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _QueryHandlerService_Compile_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _QueryHandlerService_Execute_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _QueryHandlerService_Status_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _QueryHandlerService_Fetch_Handler,
		},
		{
			MethodName: "CloseStatement",
			Handler:    _QueryHandlerService_CloseStatement_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _QueryHandlerService_Cancel_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _QueryHandlerService_CloseSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queryhandler.proto",
}
